[
  {
    "word": "fs.Dir",
    "trans": [
      {
        "cn": "类，表示目录流。创建者fs.opendir()，fs.opendirSync()或 fsPromises.opendir()。"
      }
    ]
  },
  {
    "word": "fs.Dirent",
    "trans": [
      {
        "cn": "类，通过从读取返回的目录条目的表示形式，可以是目录中的文件或子目录fs.Dir。目录条目是文件名和文件类型对的组合。"
      }
    ]
  },
  {
    "word": "fs.FSWatcher",
    "trans": [
      {
        "cn": "类，成功调用fs.watch()方法将返回一个新fs.FSWatcher 对象。只要修改了特定的监视文件，所有fs.FSWatcher对象都会发出一个'change'事件。"
      }
    ]
  },
  {
    "word": "fs.StatWatcher",
    "trans": [
      {
        "cn": "类，成功调用fs.watchFile()方法将返回一个新fs.StatWatcher 对象。  "
      }
    ]
  },
  {
    "word": "fs.ReadStream",
    "trans": [
      {
        "cn": "类，使用的实例fs.ReadStream创建并返回 fs.createReadStream()。"
      }
    ]
  },
  {
    "word": "fs.Stats",
    "trans": [
      {
        "cn": "类，fs.Stats对象提供有关文件的信息。"
      }
    ]
  },
  {
    "word": "fs.WriteStream",
    "trans": [
      {
        "cn": "类，使用的实例fs.WriteStream创建并返回 fs.createWriteStream()。"
      }
    ]
  },
  {
    "word": "fs.access(path[, mode], callback)",
    "trans": [
      {
        "cn": "测试用户对所指定的文件或目录的权限path。该mode参数是一个可选整数，它指定要执行的可访问性检查。检查“文件访问常量”中可能的值mode。可以创建由两个或多个值（例如fs.constants.W_OK | fs.constants.R_OK）的按位或组成的掩码。    "
      }
    ]
  },
  {
    "word": "fs.accessSync(path[, mode])",
    "trans": [
      {
        "cn": "同步测试用户对所指定的文件或目录的权限path。该mode参数是一个可选整数，它指定要执行的可访问性检查。"
      }
    ]
  },
  {
    "word": "fs.appendFile(path, data[, options], callback)",
    "trans": [
      {
        "cn": "异步将数据追加到文件，如果该文件尚不存在，则创建该文件。data可以是字符串或Buffer。    "
      }
    ]
  },
  {
    "word": "fs.appendFileSync(path, data[, options])",
    "trans": [
      {
        "cn": "将数据同步追加到文件，如果该文件尚不存在，则创建该文件。data可以是字符串或Buffer。"
      }
    ]
  },
  {
    "word": "fs.chmod(path, mode, callback)",
    "trans": [
      {
        "cn": "异步更改文件的权限"
      }
    ]
  },
  {
    "word": "fs.chmodSync(path, mode)",
    "trans": [
      {
        "cn": "同步更改文件的权限"
      }
    ]
  },
  {
    "word": "fs.chown(path, uid, gid, callback)",
    "trans": [
      {
        "cn": "异步更改文件的所有者和组。"
      }
    ]
  },
  {
    "word": "fs.chownSync(path, uid, gid)",
    "trans": [
      {
        "cn": "同步更改文件的所有者和组。"
      }
    ]
  },
  {
    "word": "fs.close(fd, callback)",
    "trans": [
      {
        "cn": "异步关闭文件"
      }
    ]
  },
  {
    "word": "fs.closeSync(fd)",
    "trans": [
      {
        "cn": "同步关闭文件"
      }
    ]
  },
  {
    "word": "fs.constants",
    "trans": [
      {
        "cn": "返回一个包含文件系统操作常用常量的对象。当前定义的特定常数在FS常数中进行了描述 。"
      }
    ]
  },
  {
    "word": "fs.copyFile(src, dest[, mode], callback)",
    "trans": [
      {
        "cn": "异步复制src到dest。默认情况下，dest如果已经存在，则被覆盖。除可能的异常外，没有其他任何参数被赋予回调函数。Node.js不保证复制操作的原子性。如果在打开目标文件进行写入后发生错误，Node.js将尝试删除目标。mode是一个可选整数，它指定复制操作的行为。可以创建由两个或多个值（例如fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE）的按位或组成的掩码 。"
      }
    ]
  },
  {
    "word": "fs.copyFileSync(src, dest[, mode])",
    "trans": [
      {
        "cn": "同步复制src到dest。默认情况下，dest如果已经存在，则被覆盖。返回undefined。Node.js不保证复制操作的原子性。如果在打开目标文件进行写入后发生错误，Node.js将尝试删除目标。mode是一个可选整数，它指定复制操作的行为。可以创建由两个或多个值（例如fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE）的按位或组成的掩码 。"
      }
    ]
  },
  {
    "word": "fs.createReadStream(path[, options])",
    "trans": [
      {
        "cn": "创建可读流，此方法返回的流具有 64 kb 的默认 highWaterMark"
      }
    ]
  },
  {
    "word": "fs.createWriteStream(path[, options])",
    "trans": [
      {
        "cn": "创建可写流"
      }
    ]
  },
  {
    "word": "fs.exists(path, callback)",
    "trans": [
      {
        "cn": "弃用: 改为使用 fs.stat() 或 fs.access()。"
      }
    ]
  },
  {
    "word": "fs.existsSync(path)",
    "trans": [
      {
        "cn": "如果路径存在，则返回 true，否则返回 false。"
      }
    ]
  },
  {
    "word": "fs.fchmod(fd, mode, callback)",
    "trans": [
      {
        "cn": "异步的fchmod(2), 会依参数 mode 权限来更改参数fildes所指文件的权限"
      }
    ]
  },
  {
    "word": "fs.fchmodSync(fd, mode)",
    "trans": [
      {
        "cn": "同步fchmod(2), 会依参数mode权限来更改参数fildes所指文件的权限。  "
      }
    ]
  },
  {
    "word": "fs.fchown(fd, uid, gid, callback)",
    "trans": [
      {
        "cn": "异步的fchown(2), 会将参数fd指定文件的所有者变更为参数owner代表的用户，而将该文件的组变更为参数group组"
      }
    ]
  },
  {
    "word": "fs.fchownSync(fd, uid, gid)",
    "trans": [
      {
        "cn": "同步的fchown(2), 会将参数fd指定文件的所有者变更为参数owner代表的用户，而将该文件的组变更为参数group组"
      }
    ]
  },
  {
    "word": "fs.fdatasync(fd, callback)",
    "trans": [
      {
        "cn": "异步的fdatasync(2), 用来刷新数据到磁盘"
      }
    ]
  },
  {
    "word": "fs.fdatasyncSync(fd)",
    "trans": [
      {
        "cn": "同步的fdatasync(2), 用来刷新数据到磁盘 "
      }
    ]
  },
  {
    "word": "fs.fstat(fd[, options], callback)",
    "trans": [
      {
        "cn": "异步的fstat(2)。回调获得两个参数(err, stats)where stats是fs.Stats对象。fstat()与相同stat()，除了要声明的文件由文件描述符指定fd。"
      }
    ]
  },
  {
    "word": "fs.fstatSync(fd[, options])",
    "trans": [
      {
        "cn": "同步的 fstat(2)。"
      }
    ]
  },
  {
    "word": "fs.fsync(fd, callback)",
    "trans": [
      {
        "cn": "异步的 fsync(2), 同步内存中所有已修改的文件数据到储存设备"
      }
    ]
  },
  {
    "word": "fs.fsyncSync(fd)",
    "trans": [
      {
        "cn": "同步的 fsync(2)， 同步内存中所有已修改的文件数据到储存设备"
      }
    ]
  },
  {
    "word": "fs.ftruncate(fd[, len], callback)",
    "trans": [
      {
        "cn": "异步的 ftruncate(2), 参数fd指定的文件大小改为参数length指定的大小"
      }
    ]
  },
  {
    "word": "fs.ftruncateSync(fd[, len])",
    "trans": [
      {
        "cn": "ftruncateSync, 参数fd指定的文件大小改为参数length指定的大小"
      }
    ]
  },
  {
    "word": "fs.futimes(fd, atime, mtime, callback)",
    "trans": [
      {
        "cn": "更改文件描述符指向的对象的文件系统时间戳。"
      }
    ]
  },
  {
    "word": "fs.futimesSync(fd, atime, mtime)",
    "trans": [
      {
        "cn": "fs.futimes() 的同步版本"
      }
    ]
  },
  {
    "word": "fs.lchmod(path, mode, callback)",
    "trans": [
      {
        "cn": "异步的 lchmod(2), 用于修改连接文件权限"
      }
    ]
  },
  {
    "word": "fs.lchmodSync(path, mode)",
    "trans": [
      {
        "cn": "同步的 lchmod(2),用于修改连接文件权限"
      }
    ]
  },
  {
    "word": "fs.lchown(path, uid, gid, callback)",
    "trans": [
      {
        "cn": "异步的 lchown(2),函数改变文件的所有者以及组。如果命名文件是符号链接，则lchown（）会更改链接本身的所有者或组，而不是链接所指向的对象。先前所有者或主要组对该对象的权限被撤消。"
      }
    ]
  },
  {
    "word": "fs.lchownSync(path, uid, gid)",
    "trans": [
      {
        "cn": "同步的 lchown(2), 函数改变文件的所有者以及组。如果命名文件是符号链接，则lchown（）会更改链接本身的所有者或组，而不是链接所指向的对象。先前所有者或主要组对该对象的权限被撤消。"
      }
    ]
  },
  {
    "word": "fs.lutimes(path, atime, mtime, callback)",
    "trans": [
      {
        "cn": "异步的更改文件时间戳, lutimes（）以与utimes（2）相同的方式更改文件的访问和修改时间，不同之处在于，如果filename引用符号链接，则不会取消引用该链接：相反，符号链接的时间戳为改变了。"
      }
    ]
  },
  {
    "word": "fs.lutimesSync(path, atime, mtime)",
    "trans": [
      {
        "cn": "同步的更改文件时间戳，lutimes（）以与utimes（2）相同的方式更改文件的访问和修改时间，不同之处在于，如果filename引用符号链接，则不会取消引用该链接：相反，符号链接的时间戳为改变了。"
      }
    ]
  },
  {
    "word": "fs.link(existingPath, newPath, callback)",
    "trans": [
      {
        "cn": "异步的 link(2), 把一个或多个目标文件链接成可执行文件。"
      }
    ]
  },
  {
    "word": "fs.linkSync(existingPath, newPath)",
    "trans": [
      {
        "cn": "同步的 link(2), 把一个或多个目标文件链接成可执行文件。"
      }
    ]
  },
  {
    "word": "fs.lstat(path[, options], callback)",
    "trans": [
      {
        "cn": "异步的 lstat(2), 获取文件状态"
      }
    ]
  },
  {
    "word": "fs.lstatSync(path[, options])",
    "trans": [
      {
        "cn": "同步的 lstat(2), 获取文件状态"
      }
    ]
  },
  {
    "word": "fs.mkdir(path[, options], callback)",
    "trans": [
      {
        "cn": "异步地创建目录"
      }
    ]
  },
  {
    "word": "fs.mkdirSync(path[, options])",
    "trans": [
      {
        "cn": "同步地创建目录。也可参见 mkdir(2)。"
      }
    ]
  },
  {
    "word": "fs.mkdtemp(prefix[, options], callback)",
    "trans": [
      {
        "cn": "创建一个唯一的临时目录。"
      }
    ]
  },
  {
    "word": "fs.mkdtempSync(prefix[, options])",
    "trans": [
      {
        "cn": "同步的创建一个唯一的临时目录。"
      }
    ]
  },
  {
    "word": "fs.open(path[, flags[, mode]], callback)",
    "trans": [
      {
        "cn": "异步地打开文件。 参见 open(2)。mode 用于设置文件模式（权限和粘滞位），但仅限于创建文件时。 在 Windows 上，只能操作写权限，参见 fs.chmod()。"
      }
    ]
  },
  {
    "word": "fs.opendir(path[, options], callback)",
    "trans": [
      {
        "cn": "异步地打开目录。参见 opendir(3)。 "
      }
    ]
  },
  {
    "word": "fs.opendirSync(path[, options])",
    "trans": [
      {
        "cn": "同步地打开目录。参见 opendir(3)。 "
      }
    ]
  },
  {
    "word": "fs.openSync(path[, flags, mode])",
    "trans": [
      {
        "cn": "同步的打开文件，参见 open(2)."
      }
    ]
  },
  {
    "word": "fs.read(fd, buffer, offset, length, position, callback)",
    "trans": [
      {
        "cn": "从 fd 指定的文件中读取数据。buffer 是数据（从 fd 读取）要被写入的 buffer。offset 是 buffer 中开始写入的偏移量。length 是整数，指定要读取的字节数。position 参数指定从文件中开始读取的位置。 如果 position 为 null，则从当前文件位置读取数据，并更新文件位置。 如果 position 是整数，则文件位置会保持不变。"
      }
    ]
  },
  {
    "word": "fs.read(fd, [options,] callback)",
    "trans": [
      {
        "cn": "同fs.read，会接受一个同步的fs对象"
      }
    ]
  },
  {
    "word": "fs.readdir(path[, options], callback)",
    "trans": [
      {
        "cn": "异步的 readdir(3)。 读取目录的内容。"
      }
    ]
  },
  {
    "word": "fs.readdirSync(path[, options])",
    "trans": [
      {
        "cn": "readdir(3)。 读取目录的内容。"
      }
    ]
  },
  {
    "word": "fs.readFile(path[, options], callback)",
    "trans": [
      {
        "cn": "异步地读取文件的全部内容。    "
      }
    ]
  },
  {
    "word": "fs.readFileSync(path[, options])",
    "trans": [
      {
        "cn": "同步地读取文件的全部内容。"
      }
    ]
  },
  {
    "word": "fs.readlink(path[, options], callback)",
    "trans": [
      {
        "cn": "异步的 readlink(2), 读取符号链接的值。"
      }
    ]
  },
  {
    "word": "fs.readlinkSync(path[, options])",
    "trans": [
      {
        "cn": "同步的 readlink(2), 读取符号链接的值 "
      }
    ]
  },
  {
    "word": "fs.readSync(fd, buffer, offset, length, position)",
    "trans": [
      {
        "cn": "fs.read()，从 fd 指定的文件中读取数据。buffer 是数据（从 fd 读取）要被写入的 buffer。offset 是 buffer 中开始写入的偏移量。length 是整数，指定要读取的字节数。position 参数指定从文件中开始读取的位置。 如果 position 为 null，则从当前文件位置读取数据，并更新文件位置。 如果 position 是整数，则文件位置会保持不变。"
      }
    ]
  },
  {
    "word": "fs.readSync(fd, buffer, [options])",
    "trans": [
      {
        "cn": "同fs.read，会接受一个同步的fs对象"
      }
    ]
  },
  {
    "word": "fs.readv(fd, buffers[, position], callback)",
    "trans": [
      {
        "cn": "异步的读取数据到多个缓冲区"
      }
    ]
  },
  {
    "word": "fs.readvSync(fd, buffers[, position])",
    "trans": [
      {
        "cn": "同步的读取数据到多个缓冲区"
      }
    ]
  },
  {
    "word": "fs.realpath(path[, options], callback)",
    "trans": [
      {
        "cn": "异步的通过解析 .、 .. 和符号链接异步地计算规范路径名。"
      }
    ]
  },
  {
    "word": "fs.realpath.native(path[, options], callback)",
    "trans": [
      {
        "cn": "异步的通过解析 .、 .. 和符号链接异步地计算规范路径名。仅支持可转换为 UTF8 字符串的路径。    "
      }
    ]
  },
  {
    "word": "fs.realpathSync(path[, options])",
    "trans": [
      {
        "cn": "同步的 fs.realpath()"
      }
    ]
  },
  {
    "word": "fs.realpathSync.native(path[, options])",
    "trans": [
      {
        "cn": "同步的 fs.realpath.native()"
      }
    ]
  },
  {
    "word": "fs.rename(oldPath, newPath, callback)",
    "trans": [
      {
        "cn": "异步地把 oldPath 文件重命名为 newPath 提供的路径名。 如果 newPath 已存在，则覆盖它。 "
      }
    ]
  },
  {
    "word": "fs.renameSync(oldPath, newPath)",
    "trans": [
      {
        "cn": "同步地把 oldPath 文件重命名为 newPath 提供的路径名。 如果 newPath 已存在，则覆盖它。 "
      }
    ]
  },
  {
    "word": "fs.rmdir(path[, options], callback)",
    "trans": [
      {
        "cn": "异步的 rmdir(2)"
      }
    ]
  },
  {
    "word": "fs.rmdirSync(path[, options])",
    "trans": [
      {
        "cn": "同步的 rmdir(2)。"
      }
    ]
  },
  {
    "word": "fs.rm(path[, options], callback)",
    "trans": [
      {
        "cn": "异步删除文件和目录（以标准POSIX rm实用程序为模型）。"
      }
    ]
  },
  {
    "word": "fs.rmSync(path[, options])",
    "trans": [
      {
        "cn": "同步删除文件和目录（以标准POSIX rm实用程序为模型）。"
      }
    ]
  },
  {
    "word": "fs.stat(path[, options], callback)",
    "trans": [
      {
        "cn": "异步的 stat(2)"
      }
    ]
  },
  {
    "word": "fs.statSync(path[, options])",
    "trans": [
      {
        "cn": "同步的 stat(2)"
      }
    ]
  },
  {
    "word": "fs.symlink(target, path[, type], callback)",
    "trans": [
      {
        "cn": "异步的 symlink(2)，它会创建名为 path 的链接，该链接指向 target。"
      }
    ]
  },
  {
    "word": "fs.symlinkSync(target, path[, type])",
    "trans": [
      {
        "cn": "同步的 symlink(2)，它会创建名为 path 的链接，该链接指向 target。"
      }
    ]
  },
  {
    "word": "fs.truncate(path[, len], callback)",
    "trans": [
      {
        "cn": "异步的 truncate(2)。将文件截断为指定的长度。"
      }
    ]
  },
  {
    "word": "fs.truncateSync(path[, len])",
    "trans": [
      {
        "cn": "同步的 truncate(2)。将文件截断为指定的长度。"
      }
    ]
  },
  {
    "word": "fs.unlink(path, callback)",
    "trans": [
      {
        "cn": "异步地删除文件或符号链接。 "
      }
    ]
  },
  {
    "word": "fs.unlinkSync(path)",
    "trans": [
      {
        "cn": "同步的 unlink(2)。"
      }
    ]
  },
  {
    "word": "fs.unwatchFile(filename[, listener])",
    "trans": [
      {
        "cn": "停止监视 filename 的变化。 如果指定了 listener，则仅移除此特定监听器，否则，将移除所有监听器，从而停止监视 filename。"
      }
    ]
  },
  {
    "word": "fs.utimes(path, atime, mtime, callback)",
    "trans": [
      {
        "cn": "更改 path 指向的对象的文件系统时间戳。  "
      }
    ]
  },
  {
    "word": "fs.utimesSync(path, atime, mtime)",
    "trans": [
      {
        "cn": "更改 path 指向的对象的文件系统时间戳。 "
      }
    ]
  },
  {
    "word": "fs.watch(filename[, options][, listener])",
    "trans": [
      {
        "cn": "监视 filename 的更改，其中 filename 是文件或目录。    "
      }
    ]
  },
  {
    "word": "fs.watchFile(filename[, options], listener)",
    "trans": [
      {
        "cn": "监视 filename 的更改。 每当访问文件时都会调用 listener 回调。"
      }
    ]
  },
  {
    "word": "fs.write(fd, buffer[, offset[, length[, position]]], callback)",
    "trans": [
      {
        "cn": "写入 buffer 到 fd 指定的文件。 如果 buffer 是普通的对象，则它必须具有自身的 toString 函数属性。offset 决定 buffer 中要被写入的部位， length 是整数，指定要写入的字节数。position 指定文件开头的偏移量（数据要被写入的位置）。 如果 typeof position !== 'number'，则数据会被写入当前的位置。 参见 pwrite(2)。"
      }
    ]
  },
  {
    "word": "fs.write(fd, string[, position[, encoding]], callback)",
    "trans": [
      {
        "cn": "将 string 写入到 fd 指定的文件。"
      }
    ]
  },
  {
    "word": "fs.writeFile(file, data[, options], callback)",
    "trans": [
      {
        "cn": "当 file 是文件名时，则异步地写入数据到文件（如果文件已存在，则覆盖文件）。 data 可以是字符串或 buffer。当 file 是文件描述符时，则其行为类似于直接调用 fs.write()（建议使用）。"
      }
    ]
  },
  {
    "word": "fs.writeFileSync(file, data[, options])",
    "trans": [
      {
        "cn": "详见此 API 的异步版本的文档：fs.writeFile()。    "
      }
    ]
  },
  {
    "word": "fs.writeSync(fd, buffer[, offset[, length[, position]]])",
    "trans": [
      {
        "cn": "详见此 API 的异步版本的文档：fs.write(fd, buffer...)。"
      }
    ]
  },
  {
    "word": "fs.writeSync(fd, string[, position[, encoding]])",
    "trans": [
      {
        "cn": "详见此 API 的异步版本的文档： fs.write(fd, string...)。    "
      }
    ]
  },
  {
    "word": "fs.writev(fd, buffers[, position], callback)",
    "trans": [
      {
        "cn": "使用 writev() 将一个 ArrayBufferView 数组写入 fd 指定的文件。"
      }
    ]
  },
  {
    "word": "fs.writevSync(fd, buffers[, position])",
    "trans": [
      {
        "cn": "使用 writev() 将一个 ArrayBufferView 数组写入 fd 指定的文件。"
      }
    ]
  }
]